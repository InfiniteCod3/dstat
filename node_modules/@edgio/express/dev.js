"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dev_1 = require("@edgio/core/dev");
const path_1 = require("path");
const utils_1 = require("./utils");
const chalk_1 = __importDefault(require("chalk"));
const portUtils_1 = require("@edgio/core/utils/portUtils");
const config_1 = require("@edgio/core/config");
function dev() {
    return (0, dev_1.createDevServer)({
        // All console output from your app will be prefixed with this label
        label: 'Express',
        // The command to start your app in dev mode
        run: async (port) => {
            var _a, _b;
            const config = (0, config_1.getConfig)();
            const appPath = ((_a = config === null || config === void 0 ? void 0 : config.express) === null || _a === void 0 ? void 0 : _a.appPath) || (0, utils_1.findDefaultAppPath)();
            // The user's server module should use this to bind to the correct port
            // @ts-ignore
            process.env.PORT = port;
            if (appPath) {
                let app = await import((0, path_1.resolve)(appPath));
                // Find the default export
                app = ((_b = app === null || app === void 0 ? void 0 : app.default) === null || _b === void 0 ? void 0 : _b.default) || (app === null || app === void 0 ? void 0 : app.default) || app;
                if (!app) {
                    console.error(`ERROR: No app was exported from '${appPath}'. Please export an express app instance from this file.`);
                    process.exit(1);
                }
                if (app.listen) {
                    port = (await (0, portUtils_1.getNearestUnboundPort)(port)) || port;
                    // Ideally the server module exports an express app and we simply start it on the desired poryt
                    app.listen(port, () => {
                        console.log(`Started Express server on port ${port}.`);
                    });
                }
                else {
                    // We also allow the server module to start the express app itself. We'll check if the port is used
                    // after one second and warn the user if it isn't. I chose not to error out here because who knows what
                    // the user is attempting to do when starting the server. Perhaps there is some precompilation work before binding the server
                    // that takes longer than a second? Give them the benefit of the doubt but show a warning to be helpful in the
                    // event that things aren't working properly.
                    warnIfPortUnbound(port, appPath);
                }
            }
            else {
                warnExpressServerNotFound();
            }
        },
    });
}
exports.default = dev;
/**
 * Outputs a warning if the express server module has not claimed the desired port
 * after one second.
 * @param port The port that express should claim
 * @param appPath The path to the express server module
 */
function warnIfPortUnbound(port, appPath) {
    setTimeout(async () => {
        const portBound = await (0, portUtils_1.isPortBound)(port);
        if (!portBound) {
            console.warn(`> ${chalk_1.default.bold(chalk_1.default.yellow('Warning:'))} Express server module loaded from ${chalk_1.default.cyan(appPath)} did not bind to the desired port: ${chalk_1.default.cyan(port)}. Your server should either export an Express app or bind one to the port specified by ${chalk_1.default.cyan('process.env.PORT')}.`);
        }
    }, 1000);
}
function warnExpressServerNotFound() {
    console.warn(`> ${chalk_1.default.yellow('Warning:')} Your Express server module could not be found. Add the following to ${chalk_1.default.cyan('edgio.config.js')} to specify the path to your Express server module:`);
    console.log('');
    console.log('  express: {');
    console.log("    appPath: './path/to/server.js'");
    console.log('  }');
    console.log('');
}
