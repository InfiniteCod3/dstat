"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deploy_1 = require("@edgio/core/deploy");
const bundle_esbuild_1 = require("@edgio/core/deploy/bundle-esbuild");
const bundle_nft_1 = __importDefault(require("@edgio/core/deploy/bundle-nft"));
const bundle_ncc_1 = __importDefault(require("@edgio/core/deploy/bundle-ncc"));
const path_1 = require("path");
const fs_1 = require("fs");
const utils_1 = require("./utils");
const config_1 = require("@edgio/core/config");
const types_1 = require("./types");
const chalk_1 = __importDefault(require("chalk"));
async function build(_options) {
    var _a, _b, _c;
    const edgioConfig = (0, config_1.getConfig)();
    const builder = new deploy_1.DeploymentBuilder();
    const appPath = ((_a = edgioConfig === null || edgioConfig === void 0 ? void 0 : edgioConfig.express) === null || _a === void 0 ? void 0 : _a.appPath) || (0, utils_1.findDefaultAppPath)();
    let bundler = ((_b = edgioConfig === null || edgioConfig === void 0 ? void 0 : edgioConfig.express) === null || _b === void 0 ? void 0 : _b.bundler) || types_1.BUNDLER_TYPES.esbuild;
    const outDir = (0, path_1.join)(builder.jsAppDir);
    const outFile = appPath || 'index.js';
    builder.clearPreviousBuildOutput();
    (0, fs_1.mkdirSync)(builder.jsAppDir, {
        recursive: true,
    });
    if (!appPath) {
        throw new Error("Your express app could not be bundled for deployment because no app entry point was found. Please add the path to your express app's main JS file to the express.appPath array in edgio.config.js. For example:\n\n" +
            'module.exports = {\n' +
            '  express: {\n' +
            "    appPath: './src/app.js'\n" +
            '  }\n' +
            '}');
    }
    if (!(0, fs_1.existsSync)(appPath)) {
        throw new Error(`file "${appPath}" referenced in express.appPath config of edgio.config.js does not exist.`);
    }
    if (!Object.values(types_1.BUNDLER_TYPES).includes(bundler)) {
        throw new Error(`The bundler "${bundler}" option in express.bundler config of edgio.config.js is not supported.\r\nPossible values are: ${Object.values(types_1.BUNDLER_TYPES).join(', ')}`);
    }
    if (bundler === 'esbuild') {
        try {
            process.stdout.write('> Bundling your app with esbuild...');
            // When using esbuild, we'll always transpile code to commonjs
            // to avoid issues with dynamic imports of std lib modules.
            await (0, bundle_esbuild_1.bundle)({ entryPoints: [appPath], outfile: (0, path_1.join)(outDir, outFile) });
            // We need to override any existing package.json file to one with type: commonjs
            builder.writeFileSync((0, path_1.join)(builder.jsAppDir, 'package.json'), JSON.stringify({
                type: 'commonjs',
            }));
            process.stdout.write(' done.\n');
        }
        catch (e) {
            if ((_c = e === null || e === void 0 ? void 0 : e.errors) === null || _c === void 0 ? void 0 : _c.find((error) => { var _a; return (_a = error === null || error === void 0 ? void 0 : error.text) === null || _a === void 0 ? void 0 : _a.startsWith('Top-level await is currently not supported'); })) {
                console.warn(chalk_1.default.yellow(`WARNING: The '${types_1.BUNDLER_TYPES.esbuild}' bundler cannot be used with your project, because it doesn't support top-level await. Falling back to '${types_1.BUNDLER_TYPES.vercelNft}' bundler.\r\n` +
                    `Please set express.bundler property to '${types_1.BUNDLER_TYPES.vercelNft}' in 'edgio.config.js' file.`));
                bundler = types_1.BUNDLER_TYPES.vercelNft;
            }
            else {
                throw e;
            }
        }
    }
    if (bundler === types_1.BUNDLER_TYPES.vercelNft) {
        await (0, bundle_nft_1.default)(appPath, outDir, outFile);
    }
    if (bundler === types_1.BUNDLER_TYPES.vercelNcc) {
        await (0, bundle_ncc_1.default)(appPath, outDir, outFile);
    }
    await builder.build();
}
exports.default = build;
