"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RequestContext_1 = require("../RequestContext");
/**
 * Visitor for Rules which allows to visit each node of the Rules structure
 * and call callbacks for each node type.
 */
class RulesVisitor {
    constructor(callbacks = {}) {
        this.callbacks = callbacks;
    }
    /**
     * Sets callback which is triggered when Rule node is visited.
     * @param callback
     */
    onRuleVisit(callback) {
        this.callbacks.onRuleVisit = callback;
    }
    /**
     * Sets callback which is triggered when Matches node is visited.
     * @param callback
     */
    onMatchesVisit(callback) {
        this.callbacks.onMatchesVisit = callback;
    }
    /**
     * Sets callback which is triggered when Features node is visited.
     * @param callback
     */
    onFeaturesVisit(callback) {
        this.callbacks.onFeaturesVisit = callback;
    }
    /**
     * Sets callback which is triggered when Conditionals node is visited.
     * @param callback
     */
    onConditionalsVisit(callback) {
        this.callbacks.onConditionalsVisit = callback;
    }
    /**
     * Sets callback which is triggered when Boolean node is visited.
     * @param callback
     */
    onBooleanVisit(callback) {
        this.callbacks.onBooleanVisit = callback;
    }
    /**
     * The visitor visits each node of the Rules structure and calls callbacks for each node type.
     * This is starting point of the visitor.
     * @param rules
     */
    visit(rules) {
        rules.forEach(rule => this.visitRule(rule));
    }
    /**
     * This method is called when we visit Rule node.
     * @param rule
     */
    visitRule(rule) {
        var _a, _b;
        if (RulesVisitor.isMatches(rule)) {
            this.visitMatches(rule);
        }
        else {
            this.visitFeaturesOrRules(rule);
        }
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onRuleVisit) === null || _b === void 0 ? void 0 : _b.call(_a, rule);
    }
    /**
     * This method is called when we visit Matches node.
     * @param matches
     */
    visitMatches(matches) {
        var _a, _b;
        const ifStatement = matches === null || matches === void 0 ? void 0 : matches.if;
        if (!ifStatement)
            return;
        let conditionIndex = 0;
        while (conditionIndex < matches.if.length) {
            const ifIndex = conditionIndex;
            const thenIndex = conditionIndex + 1;
            const elseIndex = conditionIndex + 2;
            const condition = ifStatement[ifIndex];
            RulesVisitor.isConditionals(condition) && this.visitConditionals(condition);
            RulesVisitor.isBoolean(condition) && this.visitBoolean(condition);
            this.visitFeaturesOrRules(ifStatement[thenIndex]);
            if (elseIndex === matches.if.length - 1) {
                this.visitFeaturesOrRules(ifStatement[elseIndex]);
                break;
            }
            else {
                // If the condition isn't last, we have an 'else-if' statement.
                // We update the index to point to the 'if' statement of it, and redo the loop.
                conditionIndex += 2;
            }
        }
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onMatchesVisit) === null || _b === void 0 ? void 0 : _b.call(_a, matches);
    }
    /**
     * This method is called when we visit Features or Rules node.
     * @param featuresOrRules
     */
    visitFeaturesOrRules(featuresOrRules) {
        RulesVisitor.isRules(featuresOrRules)
            ? this.visit(featuresOrRules)
            : this.visitFeatures(featuresOrRules);
    }
    /**
     * This method is called when we visit Features node.
     * @param features
     */
    visitFeatures(features) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onFeaturesVisit) === null || _b === void 0 ? void 0 : _b.call(_a, features);
    }
    /**
     * This method is called when we visit Conditionals node.
     * @param conditionals
     */
    visitConditionals(conditionals) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onConditionalsVisit) === null || _b === void 0 ? void 0 : _b.call(_a, conditionals);
        Object.keys(conditionals).forEach(operator => {
            const condition = conditionals[operator];
            this.visitCondition(condition, operator);
        });
    }
    /**
     * This method is called when we visit Condition node.
     * @param operator
     * @param conditions
     */
    visitCondition(condition, operator) {
        var _a, _b;
        (_b = (_a = this.callbacks) === null || _a === void 0 ? void 0 : _a.onConditionVisit) === null || _b === void 0 ? void 0 : _b.call(_a, condition, operator);
    }
    /**
     * This method is called when we visit Boolean node.
     * @param boolean
     */
    visitBoolean(boolean) {
        var _a, _b, _c, _d;
        (_a = boolean === null || boolean === void 0 ? void 0 : boolean.and) === null || _a === void 0 ? void 0 : _a.forEach(conditionals => this.visitConditionals(conditionals));
        (_b = boolean === null || boolean === void 0 ? void 0 : boolean.or) === null || _b === void 0 ? void 0 : _b.forEach(conditionals => this.visitConditionals(conditionals));
        (_d = (_c = this.callbacks) === null || _c === void 0 ? void 0 : _c.onBooleanVisit) === null || _d === void 0 ? void 0 : _d.call(_c, boolean);
    }
    /**
     * Returns true if passed object is Matches type from Rules
     * @param rule
     */
    static isMatches(rule) {
        return 'if' in rule;
    }
    /**
     * Returns true if passed object is Rules[] type from Rules
     * @param rule
     */
    static isRules(rule) {
        return Array.isArray(rule);
    }
    /**
     * Returns true if passed object is Boolean type from Rules
     * @param condition
     */
    static isBoolean(condition) {
        return [RequestContext_1.AND, RequestContext_1.OR].some(key => Object.keys(condition).includes(key));
    }
    /**
     * Returns true if passed object is Conditionals type from Rules
     * @param condition
     */
    static isConditionals(condition) {
        return [
            RequestContext_1.EQUALS_EXPRESS,
            RequestContext_1.EQUALS,
            RequestContext_1.NOT_EQUALS_EXPRESS,
            RequestContext_1.NOT_EQUALS,
            RequestContext_1.MATCHES,
            RequestContext_1.NOT_MATCHES,
            RequestContext_1.GREATER_THAN,
            RequestContext_1.GREATER_THAN_OR_EQUALS,
            RequestContext_1.LESS_THAN,
            RequestContext_1.LESS_THAN_OR_EQUALS,
            RequestContext_1.IN,
            RequestContext_1.NOT_IN,
        ].some(key => Object.keys(condition).includes(key));
    }
}
exports.default = RulesVisitor;
